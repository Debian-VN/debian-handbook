msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2015-10-06 16:10+0200\n"
"PO-Revision-Date: 2015-10-06 16:10+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"Language: en-US \n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Publican v4.3.2\n"

msgid "Binary package"
msgstr ""

msgid "Source package"
msgstr ""

msgid "dpkg"
msgstr ""

msgid "dependencies"
msgstr ""

msgid "conflict"
msgstr ""

msgid "Packaging System: Tools and Fundamental Principles"
msgstr ""

msgid "As a Debian system administrator, you will routinely handle <filename>.deb</filename> packages, since they contain consistent functional units (applications, documentation, etc.), whose installation and maintenance they facilitate. It is therefore a good idea to know what they are and how to use them."
msgstr ""

msgid "This chapter describes the structure and contents of “binary” and “source” packages. The former are <filename>.deb</filename> files, directly usable by <command>dpkg</command>, while the latter contain the source code, as well as instructions for building binary packages."
msgstr ""

msgid "Structure of a Binary Package"
msgstr ""

msgid "<primary>package</primary><secondary>binary package</secondary>"
msgstr ""

msgid "<primary><command>ar</command></primary>"
msgstr ""

msgid "The Debian package format is designed so that its content may be extracted on any Unix system that has the classic commands <command>ar</command>, <command>tar</command>, and <command>gzip</command> (sometimes <command>xz</command> or <command>bzip2</command>). This seemingly trivial property is important for portability and disaster recovery."
msgstr ""

msgid "Imagine, for example, that you mistakenly deleted the <command>dpkg</command> program, and that you could thus no longer install Debian packages. <command>dpkg</command> being a Debian package itself, it would seem your system would be done for... Fortunately, you know the format of a package and can therefore download the <filename>.deb</filename> file of the <emphasis role=\"pkg\">dpkg</emphasis> package and install it manually (see sidebar <xref linkend=\"sidebar.dpkg-apt-ar\" />). If by some misfortune one or more of the programs <command>ar</command>, <command>tar</command> or <command>gzip</command>/<command>xz</command>/<command>bzip2</command> have disappeared, you will only need to copy the missing program from another system (since each of these operates in a completely autonomous manner, without dependencies, a simple copy will suffice). If your system suffered some even more outrageous fortune, and even these don't work (maybe the deepest system libraries are missing?), you should try the static version of <command>busybox</command> (provided in the <emphasis role=\"pkg\">busybox-static</emphasis> package), which is even more self-contained, and provides subcommands such as <command>busybox ar</command>, <command>busybox tar</command> and <command>busybox gunzip</command>."
msgstr ""

msgid "<emphasis>TOOLS</emphasis> <command>dpkg</command>, <command>APT</command> and <command>ar</command>"
msgstr ""

msgid "<primary><command>dpkg</command></primary>"
msgstr ""

msgid "<primary>APT</primary>"
msgstr ""

msgid "<command>dpkg</command> is the program that handles <filename>.deb</filename> files, notably extracting, analyzing, and unpacking them."
msgstr ""

msgid "<command>APT</command> is a group of programs that allows the execution of higher-level modifications to the system: installing or removing a package (while keeping dependencies satisfied), updating the system, listing the available packages, etc."
msgstr ""

msgid "As for the <command>ar</command> program, it allows handling files of the same name: <command>ar t <replaceable>archive</replaceable></command> displays the list of files contained in such an archive, <command>ar x <replaceable>archive</replaceable></command> extracts the files from the archive into the current working directory, <command>ar d <replaceable>archive</replaceable> <replaceable>file</replaceable></command> deletes a file from the archive, etc. Its man page (<citerefentry><refentrytitle>ar</refentrytitle><manvolnum>1</manvolnum></citerefentry>) documents all its other features. <command>ar</command> is a very rudimentary tool that a Unix administrator would only use on rare occasions, but admins routinely use <command>tar</command>, a more evolved archive and file management program. This is why it is easy to restore <command>dpkg</command> in the event of an erroneous deletion. You would only have to download the Debian package and extract the content from the <filename>data.tar.gz</filename> archive in the system's root (<filename>/</filename>):"
msgstr ""

msgid ""
"\n"
"<computeroutput># </computeroutput><userinput>ar x dpkg_1.17.23_amd64.deb</userinput>\n"
"<computeroutput># </computeroutput><userinput>tar -C / -p -xzf data.tar.gz</userinput>"
msgstr ""

msgid "<emphasis>BACK TO BASICS</emphasis> Man page notation"
msgstr ""

msgid "It can be confusing for beginners to find references to “<citerefentry><refentrytitle>ar</refentrytitle><manvolnum>1</manvolnum></citerefentry>” in the literature. This is generally a convenient means of referring to the man page entitled <literal>ar</literal> in section 1."
msgstr ""

msgid "Sometimes this notation is also used to remove ambiguities, for example to distinguish between the <command>printf</command> command that can also be indicated by <citerefentry><refentrytitle>printf</refentrytitle><manvolnum>1</manvolnum></citerefentry> and the <function>printf</function> function in the C programming language, which can also be referred to as <citerefentry><refentrytitle>printf</refentrytitle><manvolnum>3</manvolnum></citerefentry>."
msgstr ""

msgid "<xref linkend=\"solving-problems\" /> discusses manual pages in further detail (see <xref linkend=\"sect.manual-pages\" />)."
msgstr ""

msgid "Have a look at the content of a <filename>.deb</filename> file:"
msgstr ""

msgid ""
"<computeroutput>$ </computeroutput><userinput>ar t dpkg_1.17.23_amd64.deb</userinput>\n"
"<computeroutput>debian-binary\n"
"control.tar.gz\n"
"data.tar.gz\n"
"$ </computeroutput><userinput>ar x dpkg_1.17.23_amd64.deb</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>ls</userinput>\n"
"<computeroutput>control.tar.gz  data.tar.gz  debian-binary  dpkg_1.17.23_amd64.deb\n"
"$ </computeroutput><userinput>tar tzf data.tar.gz | head -n 15</userinput>\n"
"<computeroutput>./\n"
"./var/\n"
"./var/lib/\n"
"./var/lib/dpkg/\n"
"./var/lib/dpkg/parts/\n"
"./var/lib/dpkg/info/\n"
"./var/lib/dpkg/alternatives/\n"
"./var/lib/dpkg/updates/\n"
"./etc/\n"
"./etc/logrotate.d/\n"
"./etc/logrotate.d/dpkg\n"
"./etc/dpkg/\n"
"./etc/dpkg/dpkg.cfg.d/\n"
"./etc/dpkg/dpkg.cfg\n"
"./etc/alternatives/\n"
"$ </computeroutput><userinput>tar tzf control.tar.gz</userinput>\n"
"<computeroutput>./\n"
"./conffiles\n"
"./postinst\n"
"./md5sums\n"
"./prerm\n"
"./preinst\n"
"./control\n"
"./postrm\n"
"$ </computeroutput><userinput>cat debian-binary</userinput>\n"
"<computeroutput>2.0</computeroutput>"
msgstr ""

msgid "As you can see, the <command>ar</command> archive of a Debian package is comprised of three files:"
msgstr ""

msgid "<filename>debian-binary</filename>. This is a text file which simply indicates the version of the <filename>.deb</filename> file used (in 2015: version 2.0)."
msgstr ""

msgid "<filename>control.tar.gz</filename>. This archive file contains all of the available meta-information, like the name and version of the package. Some of this meta-information allows package management tools to determine if it is possible to install or uninstall it, for example according to the list of packages already on the machine."
msgstr ""

msgid "<filename>data.tar.gz</filename>. This archive contains all of the files to be extracted from the package; this is where the executable files, documentation, etc., are all stored. Some packages may use other compression formats, in which case the file will be named differently (<filename>data.tar.bz2</filename> for bzip2, <filename>data.tar.xz</filename> for XZ)."
msgstr ""

msgid "Package Meta-Information"
msgstr ""

msgid "<primary>package meta-information</primary>"
msgstr ""

msgid "<primary>package</primary><secondary>meta-information</secondary>"
msgstr ""

msgid "The Debian package is not only an archive of files intended for installation. It is part of a larger whole, and it describes its relationship with other Debian packages (dependencies, conflicts, suggestions). It also provides scripts that enable the execution of commands at different stages in the package's lifecycle (installation, removal, upgrades). These data are used by the package management tools but are not part of the packaged software; they are, within the package, what is called its “meta-information” (information about other information)."
msgstr ""

msgid "Description: the <filename>control</filename> File"
msgstr ""

msgid "<primary><filename>control</filename></primary>"
msgstr ""

msgid "This file uses a structure similar to email headers (as defined by RFC 2822). For example, for <emphasis role=\"pkg\">apt</emphasis>, the <filename>control</filename> file looks like the following:"
msgstr ""

msgid ""
"\n"
"<computeroutput>$ </computeroutput><userinput>apt-cache show apt</userinput>\n"
"<computeroutput>Package: apt\n"
"Version: 1.0.9.6\n"
"Installed-Size: 3788\n"
"Maintainer: APT Development Team &lt;deity@lists.debian.org&gt;\n"
"Architecture: amd64\n"
"Replaces: manpages-it (&lt;&lt; 2.80-4~), manpages-pl (&lt;&lt; 20060617-3~), openjdk-6-jdk (&lt;&lt; 6b24-1.11-0ubuntu1~), sun-java5-jdk (&gt;&gt; 0), sun-java6-jdk (&gt;&gt; 0)\n"
"Depends: libapt-pkg4.12 (&gt;= 1.0.9.6), libc6 (&gt;= 2.15), libgcc1 (&gt;= 1:4.1.1), libstdc++6 (&gt;= 4.9), debian-archive-keyring, gnupg\n"
"Suggests: aptitude | synaptic | wajig, dpkg-dev (&gt;= 1.17.2), apt-doc, python-apt\n"
"Conflicts: python-apt (&lt;&lt; 0.7.93.2~)\n"
"Breaks: manpages-it (&lt;&lt; 2.80-4~), manpages-pl (&lt;&lt; 20060617-3~), openjdk-6-jdk (&lt;&lt; 6b24-1.11-0ubuntu1~), sun-java5-jdk (&gt;&gt; 0), sun-java6-jdk (&gt;&gt; 0)\n"
"Description-en: commandline package manager\n"
" This package provides commandline tools for searching and\n"
" managing as well as querying information about packages\n"
" as a low-level access to all features of the libapt-pkg library.\n"
" .\n"
" These include:\n"
"  * apt-get for retrieval of packages and information about them\n"
"    from authenticated sources and for installation, upgrade and\n"
"    removal of packages together with their dependencies\n"
"  * apt-cache for querying available information about installed\n"
"    as well as installable packages\n"
"  * apt-cdrom to use removable media as a source for packages\n"
"  * apt-config as an interface to the configuration settings\n"
"  * apt-key as an interface to manage authentication keys\n"
"Description-md5: 9fb97a88cb7383934ef963352b53b4a7\n"
"Tag: admin::package-management, devel::lang:ruby, hardware::storage,\n"
" hardware::storage:cd, implemented-in::c++, implemented-in::perl,\n"
" implemented-in::ruby, interface::commandline, network::client,\n"
" protocol::ftp, protocol::http, protocol::ipv6, role::program,\n"
" role::shared-lib, scope::application, scope::utility, sound::player,\n"
" suite::debian, use::downloading, use::organizing, use::searching,\n"
" works-with::audio, works-with::software:package, works-with::text\n"
"Section: admin\n"
"Priority: important\n"
"Filename: pool/main/a/apt/apt_1.0.9.6_amd64.deb\n"
"Size: 1107560\n"
"MD5sum: a325ccb14e69fef2c50da54e035a4df4\n"
"SHA1: 635d09fcb600ec12810e3136d51e696bcfa636a6\n"
"SHA256: 371a559ce741394b59dbc6460470a9399be5245356a9183bbeea0f89ecaabb03</computeroutput>"
msgstr ""

msgid "<emphasis>BACK TO BASICS</emphasis> RFC — Internet standards"
msgstr ""

msgid "<primary>RFC</primary>"
msgstr ""

msgid "<primary>Request For Comments</primary>"
msgstr ""

msgid "RFC is the abbreviation of “Request For Comments”. An RFC is generally a technical document that describes what will become an Internet standard. Before becoming standardized and frozen, these standards are submitted for public review (hence their name). The IETF (Internet Engineering Task Force) decides on the evolution of the status of these documents (proposed standard, draft standard, or standard)."
msgstr ""

msgid "RFC 2026 defines the process for standardization of Internet protocols. <ulink type=\"block\" url=\"http://www.faqs.org/rfcs/rfc2026.html\" />"
msgstr ""

msgid "Dependencies: the <literal>Depends</literal> Field"
msgstr ""

msgid "<primary>dependency</primary>"
msgstr ""

msgid "<primary><literal>Depends</literal>, header field</primary>"
msgstr ""

msgid "<primary>package</primary><secondary>dependency</secondary>"
msgstr ""

msgid "The dependencies are defined in the <literal>Depends</literal> field in the package header. This is a list of conditions to be met for the package to work correctly — this information is used by tools such as <command>apt</command> in order to install the required libraries, in appropriate versions fulfilling the dependencies of the package to be installed. For each dependency, it is possible to restrict the range of versions that meet that condition. In other words, it is possible to express the fact that we need the package <emphasis role=\"pkg\">libc6</emphasis> in a version equal to or greater than “2.15” (written “<command>libc6 (&gt;= 2.15)</command>”). Version comparison operators are as follows:"
msgstr ""

msgid "<command>&lt;&lt;</command>: less than;"
msgstr ""

msgid "<command>&lt;=</command>: less than or equal to;"
msgstr ""

msgid "<command>=</command>: equal to (note that “<literal>2.6.1</literal>” is not equal to “<literal>2.6.1-1</literal>”);"
msgstr ""

msgid "<command>&gt;=</command>: greater than or equal to;"
msgstr ""

msgid "<command>&gt;&gt;</command>: greater than."
msgstr ""

msgid "In a list of conditions to be met, the comma serves as a separator. It must be interpreted as a logical “and”. In conditions, the vertical bar (“|”) expresses a logical “or” (it is an inclusive “or”, not an exclusive “either/or”). Carrying greater priority than “and”, it can be used as many times as necessary. Thus, the dependency “(A or B) and C” is written <command>A | B, C</command>. In contrast, the expression “A or (B and C)” should be written as “(A or B) and (A or C)”, since the <literal>Depends</literal> field does not tolerate parentheses that change the order of priorities between the logical operators “or” and “and”. It would thus be written <command>A | B, A | C</command>. <ulink type=\"block\" url=\"http://www.debian.org/doc/debian-policy/ch-relationships.html\" />"
msgstr ""

msgid "<primary>meta-package</primary>"
msgstr ""

msgid "The dependencies system is a good mechanism for guaranteeing the operation of a program, but it has another use with “meta-packages”. These are empty packages that only describe dependencies. They facilitate the installation of a consistent group of programs preselected by the meta-package maintainer; as such, <command>apt install <replaceable>meta-package</replaceable></command> will automatically install all of these programs using the meta-package's dependencies. The <emphasis role=\"pkg\">gnome</emphasis>, <emphasis role=\"pkg\">kde-full</emphasis> and <emphasis role=\"pkg\">linux-image-amd64</emphasis> packages are examples of meta-packages."
msgstr ""

msgid "<emphasis>DEBIAN POLICY</emphasis> <literal>Pre-Depends</literal>, a more demanding <literal>Depends</literal>"
msgstr ""

msgid "<primary><literal>Pre-Depends</literal>, header field</primary>"
msgstr ""

msgid "<primary>pre-dependency</primary>"
msgstr ""

msgid "“Pre-dependencies”, which are listed in the “<literal>Pre-Depends</literal>” field in the package headers, complete the normal dependencies; their syntax is identical. A normal dependency indicates that the package in question must be unpacked and configured before configuration of the package declaring the dependency. A pre-dependency stipulates that the package in question must be unpacked and configured before execution of the pre-installation script of the package declaring the pre-dependency, that is before its installation."
msgstr ""

msgid "A pre-dependency is very demanding for <command>apt</command>, because it adds a strict constraint on the ordering of the packages to install. As such, pre-dependencies are discouraged unless absolutely necessary. It is even recommended to consult other developers on <email>debian-devel@lists.debian.org</email> before adding a pre-dependency. It is generally possible to find another solution as a work-around."
msgstr ""

msgid "<emphasis>DEBIAN POLICY</emphasis> <literal>Recommends</literal>, <literal>Suggests</literal>, and <literal>Enhances</literal> fields"
msgstr ""

msgid "<primary><literal>Recommends</literal>, header field</primary>"
msgstr ""

msgid "<primary><literal>Suggests</literal>, header field</primary>"
msgstr ""

msgid "The <literal>Recommends</literal> and <literal>Suggests</literal> fields describe dependencies that are not compulsory. The “recommended” dependencies, the most important, considerably improve the functionality offered by the package but are not indispensable to its operation. The “suggested” dependencies, of secondary importance, indicate that certain packages may complement and increase their respective utility, but it is perfectly reasonable to install one without the others."
msgstr ""

msgid "You should always install the “recommended” packages, unless you know exactly why you do not need them. Conversely, it is not necessary to install “suggested” packages unless you know why you need them."
msgstr ""

msgid "<primary><literal>Enhances</literal>, header field</primary>"
msgstr ""

msgid "The <literal>Enhances</literal> field also describes a suggestion, but in a different context. It is indeed located in the suggested package, and not in the package that benefits from the suggestion. Its interest lies in that it is possible to add a suggestion without having to modify the package that is concerned. Thus, all add-ons, plug-ins, and other extensions of a program can then appear in the list of suggestions related to the software. Although it has existed for several years, this last field is still largely ignored by programs such as <command>apt</command> or <command>synaptic</command>. Its purpose is for a suggestion made by the <literal>Enhances</literal> field to appear to the user in addition to the traditional suggestions — found in the <literal>Suggests</literal> field."
msgstr ""

msgid "Conflicts: the <literal>Conflicts</literal> field"
msgstr ""

msgid "<primary>conflicts</primary>"
msgstr ""

msgid "<primary><literal>Conflicts</literal>, header field</primary>"
msgstr ""

msgid "<primary>package</primary><secondary>conflict</secondary>"
msgstr ""

msgid "The <literal>Conflicts</literal> field indicates when a package cannot be installed simultaneously with another. The most common reasons for this are that both packages include a file of the same name, or provide the same service on the same TCP port, or would hinder each other's operation."
msgstr ""

msgid "<command>dpkg</command> will refuse to install a package if it triggers a conflict with an already installed package, except if the new package specifies that it will “replace” the installed package, in which case <command>dpkg</command> will choose to replace the old package with the new one. <command>apt</command> always follows your instructions: if you choose to install a new package, it will automatically offer to uninstall the package that poses a problem."
msgstr ""

msgid "Incompatibilities: the <literal>Breaks</literal> Field"
msgstr ""

msgid "<primary>incompatibilities</primary>"
msgstr ""

msgid "<primary><literal>Breaks</literal>, header field</primary>"
msgstr ""

msgid "<primary>package</primary><secondary>incompatibility</secondary>"
msgstr ""

msgid "The <literal>Breaks</literal> field has an effect similar to that of the <literal>Conflicts</literal> field, but with a special meaning. It signals that the installation of a package will “break” another package (or particular versions of it). In general, this incompatibility between two packages is transitory, and the <literal>Breaks</literal> relationship specifically refers to the incompatible versions."
msgstr ""

msgid "<command>dpkg</command> will refuse to install a package that breaks an already installed package, and <command>apt</command> will try to resolve the problem by updating the package that would be broken to a newer version (which is assumed to be fixed and, thus, compatible again)."
msgstr ""

msgid "This type of situation may occur in the case of updates without backwards compatibility: this is the case if the new version no longer functions with the older version, and causes a malfunction in another program without making special provisions. The <literal>Breaks</literal> field prevents the user from running into these problems."
msgstr ""

msgid "Provided Items: the <literal>Provides</literal> Field"
msgstr ""

msgid "<primary><literal>Provides</literal>, header field</primary>"
msgstr ""

msgid "This field introduces the very interesting concept of a “virtual package”. It has many roles, but two are of particular importance. The first role consists in using a virtual package to associate a generic service with it (the package “provides” the service). The second indicates that a package completely replaces another, and that for this purpose it can also satisfy the dependencies that the other would satisfy. It is thus possible to create a substitution package without having to use the same package name."
msgstr ""

msgid "<emphasis>VOCABULARY</emphasis> Meta-package and virtual package"
msgstr ""

msgid "<primary>package</primary><secondary>virtual package</secondary>"
msgstr ""

msgid "<primary>virtual package</primary>"
msgstr ""

msgid "It is essential to clearly distinguish meta-packages from virtual packages. The former are real packages (including real <filename>.deb</filename> files), whose only purpose is to express dependencies."
msgstr ""

msgid "Virtual packages, however, do not exist physically; they are only a means of identifying real packages based on common, logical criteria (service provided, compatibility with a standard program or a pre-existing package, etc.)."
msgstr ""

msgid "Providing a “Service”"
msgstr ""

msgid "Let us discuss the first case in greater detail with an example: all mail servers, such as <emphasis role=\"pkg\">postfix</emphasis> or <emphasis role=\"pkg\">sendmail</emphasis> are said to “provide” the <emphasis role=\"pkg\">mail-transport-agent</emphasis> virtual package. Thus, any package that needs this service to be functional (e.g. a mailing list manager, such as <emphasis role=\"pkg\">smartlist</emphasis> or <emphasis role=\"pkg\">sympa</emphasis>) simply states in its dependencies that it requires a <emphasis role=\"pkg\">mail-transport-agent</emphasis> instead of specifying a large yet incomplete list of possible solutions (e.g. <command>postfix | sendmail | exim4 | …</command>). Furthermore, it is useless to install two mail servers on the same machine, which is why each of these packages declares a conflict with the <emphasis role=\"pkg\">mail-transport-agent</emphasis> virtual package. A conflict between a package and itself is ignored by the system, but this technique will prohibit the installation of two mail servers side by side."
msgstr ""

msgid "<emphasis>DEBIAN POLICY</emphasis> List of virtual packages"
msgstr ""

msgid "For virtual packages to be useful, everyone must agree on their name. This is why they are standardized in the Debian Policy. The list includes among others <emphasis role=\"pkg\">mail-transport-agent</emphasis> for mail servers, <emphasis role=\"pkg\">c-compiler</emphasis> for C programming language compilers, <emphasis role=\"pkg\">www-browser</emphasis> for web browsers, <emphasis role=\"pkg\">httpd</emphasis> for web servers, <emphasis role=\"pkg\">ftp-server</emphasis> for FTP servers, <emphasis role=\"pkg\">x-terminal-emulator</emphasis> for terminal emulators in graphical mode (<command>xterm</command>), and <emphasis role=\"pkg\">x-window-manager</emphasis> for window managers."
msgstr ""

msgid "The full list can be found on the Web. <ulink type=\"block\" url=\"http://www.debian.org/doc/packaging-manuals/virtual-package-names-list.txt\" />"
msgstr ""

msgid "Interchangeability with Another Package"
msgstr ""

msgid "The <literal>Provides</literal> field is also interesting when the content of a package is included in a larger package. For example, the <emphasis role=\"pkg\">libdigest-md5-perl</emphasis> Perl module was an optional module in Perl 5.6, and has been integrated as standard in Perl 5.8 (and later versions, such as 5.20 present in <emphasis role=\"distribution\">Jessie</emphasis>). As such, the package <emphasis role=\"pkg\">perl</emphasis> has since version 5.8 declared <literal>Provides: libdigest-md5-perl</literal> so that the dependencies on this package are met if the user has Perl 5.8 (or newer). The <emphasis role=\"pkg\">libdigest-md5-perl</emphasis> package itself has eventually been deleted, since it no longer had any purpose when old Perl versions were removed."
msgstr ""

msgid "Use of a <literal>Provides</literal> field in order to not break dependencies"
msgstr ""

msgid "This feature is very useful, since it is never possible to anticipate the vagaries of development, and it is necessary to be able to adjust to renaming, and other automatic replacement, of obsolete software."
msgstr ""

msgid "<emphasis>BACK TO BASICS</emphasis> Perl, a programming language"
msgstr ""

msgid "<primary>Perl</primary>"
msgstr ""

msgid "<primary>CPAN</primary>"
msgstr ""

msgid "Perl (Practical Extraction and Report Language) is a very popular programming language. It has many ready-to-use modules that cover a vast spectrum of applications, and that are distributed by the CPAN (Comprehensive Perl Archive Network) servers, an exhaustive network of Perl packages. <ulink type=\"block\" url=\"http://www.perl.org/\" /> <ulink type=\"block\" url=\"http://www.cpan.org/\" />"
msgstr ""

msgid "Since it is an interpreted language, a program written in Perl does not require compilation prior to execution. This is why they are called “Perl scripts”."
msgstr ""

msgid "Past Limitations"
msgstr ""

msgid "Virtual packages used to suffer from some limitations, the most significant of which was the absence of a version number. To return to the previous example, a dependency such as <literal>Depends: libdigest-md5-perl (&gt;= 1.6)</literal>, despite the presence of Perl 5.10, would never be considered as satisfied by the packaging system — while in fact it most likely is satisfied. Unaware of this, the package system chose the least risky option, assuming that the versions do not match."
msgstr ""

msgid "This limitation has been lifted in <emphasis role=\"pkg\">dpkg</emphasis> 1.17.11, and is no longer relevant in Jessie. Packages can assign a version to the virtual packages they provide with a dependency such as <literal>Provides: libdigest-md5-perl (= 1.8)</literal>."
msgstr ""

msgid "Replacing Files: The <literal>Replaces</literal> Field"
msgstr ""

msgid "<primary>replacement</primary>"
msgstr ""

msgid "<primary><literal>Replaces</literal>, header field</primary>"
msgstr ""

msgid "<primary>package</primary><secondary>replacement</secondary>"
msgstr ""

msgid "The <literal>Replaces</literal> field indicates that the package contains files that are also present in another package, but that the package is legitimately entitled to replace them. Without this specification, <command>dpkg</command> fails, stating that it can not overwrite the files of another package (technically, it is possible to force it to do so with the <literal>--force-overwrite</literal> option, but that is not considered standard operation). This allows identification of potential problems and requires the maintainer to study the matter prior to choosing whether to add such a field."
msgstr ""

msgid "The use of this field is justified when package names change or when a package is included in another. This also happens when the maintainer decides to distribute files differently among various binary packages produced from the same source package: a replaced file no longer belongs to the old package, but only to the new one."
msgstr ""

msgid "If all of the files in an installed package have been replaced, the package is considered to be removed. Finally, this field also encourages <command>dpkg</command> to remove the replaced package where there is a conflict."
msgstr ""

msgid "<emphasis>GOING FURTHER</emphasis> The <literal>Tag</literal> field"
msgstr ""

msgid "In the <emphasis role=\"pkg\">apt</emphasis> example above, we can see the presence of a field that we have not yet described, the <literal>Tag</literal> field. This field does not describe a relationship between packages, but is simply a way of categorizing a package in a thematic taxonomy. This classification of packages according to several criteria (type of interface, programming language, domain of application, etc.) has been available for a long time. Despite this, not all packages have accurate tags and it is not yet integrated in all Debian tools; <command>aptitude</command> displays these tags, and allows them to be used as search criteria. For those who are repelled by <command>aptitude</command>'s search criteria, the following website allows navigation of the tag database: <ulink type=\"block\" url=\"http://debtags.alioth.debian.org/\" />"
msgstr ""

msgid "Configuration Scripts"
msgstr ""

msgid "<primary><filename>postinst</filename></primary>"
msgstr ""

msgid "<primary><filename>preinst</filename></primary>"
msgstr ""

msgid "<primary><filename>postrm</filename></primary>"
msgstr ""

msgid "<primary><filename>prerm</filename></primary>"
msgstr ""

msgid "<primary><filename>control.tar.gz</filename></primary>"
msgstr ""

msgid "In addition to the <filename>control</filename> file, the <filename>control.tar.gz</filename> archive for each Debian package may contain a number of scripts, called by <command>dpkg</command> at different stages in the processing of a package. The Debian Policy describes the possible cases in detail, specifying the scripts called and the arguments that they receive. These sequences may be complicated, since if one of the scripts fails, <command>dpkg</command> will try to return to a satisfactory state by canceling the installation or removal in progress (insofar as it is possible)."
msgstr ""

msgid "<emphasis>GOING FURTHER</emphasis> <command>dpkg</command>'s database"
msgstr ""

msgid "<primary><filename>/var/lib/dpkg/</filename></primary>"
msgstr ""

msgid "<primary>dpkg</primary><secondary>database</secondary>"
msgstr ""

msgid "All of the configuration scripts for installed packages are stored in the <filename>/var/lib/dpkg/info/</filename> directory, in the form of a file prefixed with the package's name. This directory also includes a file with the <filename>.list</filename> extension for each package, containing the list of files that belong to that package."
msgstr ""

msgid "The <filename>/var/lib/dpkg/status</filename> file contains a series of data blocks (in the format of the famous mail headers, RFC 2822) describing the status of each package. The information from the <filename>control</filename> file of the installed packages is also replicated there."
msgstr ""

msgid "In general, the <filename>preinst</filename> script is executed prior to installation of the package, while the <filename>postinst</filename> follows it. Likewise, <filename>prerm</filename> is invoked before removal of a package and <filename>postrm</filename> afterwards. An update of a package is equivalent to removal of the previous version and installation of the new one. It is not possible to describe in detail all the possible scenarios here, but we will discuss the most common two: an installation/update and a removal."
msgstr ""

msgid "<emphasis>CAUTION</emphasis> Symbolic names of the scripts"
msgstr ""

msgid "The sequences described in this section call configuration scripts by specific names, such as <command>old-prerm</command> or <command>new-postinst</command>. They are, respectively, the <command>prerm</command> script contained in the old version of the package (installed before the update) and the <command>postinst</command> script contained in the new version (installed by the update)."
msgstr ""

msgid "<emphasis>TIP</emphasis> State diagrams"
msgstr ""

msgid "Manoj Srivastava made these diagrams explaining how the configuration scripts are called by <command>dpkg</command>. Similar diagrams have also been developed by the Debian Women project; they are a bit simpler to understand, but less complete. <ulink type=\"block\" url=\"https://people.debian.org/~srivasta/MaintainerScripts.html\" /> <ulink type=\"block\" url=\"https://wiki.debian.org/MaintainerScripts\" />"
msgstr ""

msgid "Installation and Upgrade"
msgstr ""

msgid "<primary><command>dpkg</command></primary><secondary>internal operation</secondary>"
msgstr ""

msgid "Here is what happens during an installation (or an update):"
msgstr ""

msgid "For an update, <command>dpkg</command> calls the <command>old-prerm upgrade <replaceable>new-version</replaceable></command>."
msgstr ""

msgid "Still for an update, <command>dpkg</command> then executes <command>new-preinst upgrade <replaceable>old-version</replaceable></command>; for a first installation, it executes <command>new-preinst install</command>. It may add the old version in the last parameter, if the package has already been installed and removed since (but not purged, the configuration files having been retained)."
msgstr ""

msgid "The new package files are then unpacked. If a file already exists, it is replaced, but a backup copy is temporarily made."
msgstr ""

msgid "For an update, <command>dpkg</command> executes <command>old-postrm upgrade <replaceable>new-version</replaceable></command>."
msgstr ""

msgid "<command>dpkg</command> updates all of the internal data (file list, configuration scripts, etc.) and removes the backups of the replaced files. This is the point of no return: <command>dpkg</command> no longer has access to all of the elements necessary to return to the previous state."
msgstr ""

msgid "<command>dpkg</command> will update the configuration files, asking the user to decide if it is unable to automatically manage this task. The details of this procedure are discussed in <xref linkend=\"sect.conffiles\" />."
msgstr ""

msgid "Finally, <command>dpkg</command> configures the package by executing <command>new-postinst configure <replaceable>last-version-configured</replaceable></command>."
msgstr ""

msgid "Package Removal"
msgstr ""

msgid "Here is what happens during a package removal:"
msgstr ""

msgid "<command>dpkg</command> calls <command>prerm remove</command>."
msgstr ""

msgid "<command>dpkg</command> removes all of the package's files, with the exception of the configuration files and configuration scripts."
msgstr ""

msgid "<command>dpkg</command> executes <command>postrm remove</command>. All of the configuration scripts, except <filename>postrm</filename>, are removed. If the user has not used the “purge” option, the process stops here."
msgstr ""

msgid "For a complete purge of the package (command issued with <command>dpkg --purge</command> or <command>dpkg -P</command>), the configuration files are also deleted, as well as a certain number of copies (<filename>*.dpkg-tmp</filename>, <filename>*.dpkg-old</filename>, <filename>*.dpkg-new</filename>) and temporary files; <command>dpkg</command> then executes <command>postrm purge</command>."
msgstr ""

msgid "<emphasis>VOCABULARY</emphasis> Purge, a complete removal"
msgstr ""

msgid "<primary>purge of a package</primary>"
msgstr ""

msgid "When a Debian package is removed, the configuration files are retained in order to facilitate possible re-installation. Likewise, the data generated by a daemon (such as the content of an LDAP server directory, or the content of a database for an SQL server) are usually retained."
msgstr ""

msgid "To remove all data associated with a package, it is necessary to “purge” the package with the command, <command>dpkg -P <replaceable>package</replaceable></command>, <command>apt-get remove --purge <replaceable>package</replaceable></command> or <command>aptitude purge <replaceable>package</replaceable></command>."
msgstr ""

msgid "Given the definitive nature of such data removals, a purge should not be taken lightly."
msgstr ""

msgid "<primary><filename>config</filename>, <command>debconf</command> script</primary>"
msgstr ""

msgid "The four scripts detailed above are complemented by a <filename>config</filename> script, provided by packages using <command>debconf</command> to acquire information from the user for configuration. During installation, this script defines in detail the questions asked by <command>debconf</command>. The responses are recorded in the <command>debconf</command> database for future reference. The script is generally executed by <command>apt</command> prior to installing packages one by one in order to group all the questions and ask them all to the user at the beginning of the process. The pre- and post-installation scripts can then use this information to operate according to the user's wishes."
msgstr ""

msgid "<emphasis>TOOL</emphasis> <command>debconf</command>"
msgstr ""

msgid "<primary><command>debconf</command></primary>"
msgstr ""

msgid "<command>debconf</command> was created to resolve a recurring problem in Debian. All Debian packages unable to function without a minimum of configuration used to ask questions with calls to the <command>echo</command> and <command>read</command> commands in <filename>postinst</filename> shell scripts (and other similar scripts). But this also means that during a large installation or update the user must stay with their computer to respond to various questions that may arise at any time. These manual interactions have now been almost entirely dispensed with, thanks to the <command>debconf</command> tool."
msgstr ""

msgid "<command>debconf</command> has many interesting features: it requires the developer to specify user interaction; it allows localization of all the strings displayed to users (all translations are stored in the <filename>templates</filename> file describing the interactions); it has different frontends to display the questions to the user (text mode, graphical mode, non-interactive); and it allows creation of a central database of responses to share the same configuration with several computers... but the most important is that it is now possible to present all of the questions in a row to the user, prior to starting a long installation or update process. The user can go about their business while the system handles the installation on its own, without having to stay there staring at the screen waiting for questions."
msgstr ""

msgid "Checksums, List of Configuration Files"
msgstr ""

msgid "<primary><filename>md5sums</filename></primary>"
msgstr ""

msgid "<primary><filename>conffiles</filename></primary>"
msgstr ""

msgid "<primary>checksums</primary>"
msgstr ""

msgid "<primary>files</primary><secondary>configuration files</secondary>"
msgstr ""

msgid "<primary>configuration</primary><secondary>files</secondary>"
msgstr ""

msgid "In addition to the maintainer scripts and control data already mentioned in the previous sections, the <filename>control.tar.gz</filename> archive of a Debian package may contain other interesting files. The first, <filename>md5sums</filename>, contains the MD5 checksums for all of the package's files. Its main advantage is that it allows <command>dpkg --verify</command> (which we will study in <xref linkend=\"sect.dpkg-verify\" />) to check if these files have been modified since their installation. Note that when this file doesn't exist, <command>dpkg</command> will generate it dynamically at installation time (and store it in the dpkg database just like other control files)."
msgstr ""

msgid "<filename>conffiles</filename> lists package files that must be handled as configuration files. Configuration files can be modified by the administrator, and <command>dpkg</command> will try to preserve those changes during a package update."
msgstr ""

msgid "In effect, in this situation, <command>dpkg</command> behaves as intelligently as possible: if the standard configuration file has not changed between the two versions, it does nothing. If, however, the file has changed, it will try to update this file. Two cases are possible: either the administrator has not touched this configuration file, in which case <command>dpkg</command> automatically installs the new version; or the file has been modified, in which case <command>dpkg</command> asks the administrator which version they wish to use (the old one with modifications, or the new one provided with the package). To assist in making this decision, <command>dpkg</command> offers to display a “<command>diff</command>” that shows the difference between the two versions. If the user chooses to retain the old version, the new one will be stored in the same location in a file with the <filename>.dpkg-dist</filename> suffix. If the user chooses the new version, the old one is retained in a file with the <filename>.dpkg-old</filename> suffix. Another available action consists of momentarily interrupting <command>dpkg</command> to edit the file and attempt to re-instate the relevant modifications (previously identified with <command>diff</command>)."
msgstr ""

msgid "<emphasis>GOING FURTHER</emphasis> Avoiding the configuration file questions"
msgstr ""

msgid "<command>dpkg</command> handles configuration file updates, but, while doing so, regularly interrupts its work to ask for input from the administrator. This makes it less than enjoyable for those who wish to run updates in a non-interactive manner. This is why this program offers options that allow the system to respond automatically according to the same logic: <command>--force-confold</command> retains the old version of the file; <command>--force-confnew</command> will use the new version of the file (these choices are respected, even if the file has not been changed by the administrator, which only rarely has the desired effect). Adding the <command>--force-confdef</command> option tells <command>dpkg</command> to decide by itself when possible (in other words, when the original configuration file has not been touched), and only uses <command>--force-confnew</command> or <command>--force-confold</command> for other cases."
msgstr ""

msgid "These options apply to <command>dpkg</command>, but most of the time the administrator will work directly with the <command>aptitude</command> or <command>apt-get</command> programs. It is, thus, necessary to know the syntax used to indicate the options to pass to the <command>dpkg</command> command (their command line interfaces are very similar)."
msgstr ""

msgid "\n"
"<computeroutput># </computeroutput><userinput>apt -o DPkg::options::=\"--force-confdef\" -o DPkg::options::=\"--force-confold\" full-upgrade</userinput>"
msgstr ""

msgid "These options can be stored directly in <command>apt</command>'s configuration. To do so, simply write the following line in the <filename>/etc/apt/apt.conf.d/local</filename> file:"
msgstr ""

msgid "\n"
"DPkg::options { \"--force-confdef\"; \"--force-confold\"; }"
msgstr ""

msgid "Including this option in the configuration file means that it will also be used in a graphical interface such as <command>aptitude</command>."
msgstr ""

msgid "<emphasis>GOING FURTHER</emphasis> Force dpkg to ask configuration file questions"
msgstr ""

msgid "The <command>--force-confask</command> option requires <command>dpkg</command> to display the questions about the configuration files, even in cases where they would not normally be necessary. Thus, when reinstalling a package with this option, <command>dpkg</command> will ask the questions again for all of the configuration files modified by the administrator. This is very convenient, especially for reinstalling the original configuration file if it has been deleted and no other copy is available: a normal re-installation won't work, because <command>dpkg</command> considers removal as a form of legitimate modification, and, thus, doesn't install the desired configuration file."
msgstr ""

msgid "Structure of a Source Package"
msgstr ""

msgid "<primary>package</primary><secondary>source package</secondary>"
msgstr ""

msgid "<primary>source</primary><secondary>package</secondary>"
msgstr ""

msgid "Format"
msgstr ""

msgid "<primary>DSC file</primary>"
msgstr ""

msgid "<primary><filename>diff.gz</filename> file</primary>"
msgstr ""

msgid "<primary><filename>debian.tar.gz</filename> file</primary>"
msgstr ""

msgid "<primary><filename>orig.tar.gz</filename> file</primary>"
msgstr ""

msgid "A source package is usually comprised of three files, a <filename>.dsc</filename>, a <filename>.orig.tar.gz</filename>, and a <filename>.debian.tar.gz</filename> (or <filename>.diff.gz</filename>). They allow creation of binary packages (<filename>.deb</filename> files described above) from the source code files of the program, which are written in a programming language."
msgstr ""

msgid "The <filename>.dsc</filename> (Debian Source Control) file is a short text file containing an RFC 2822 header (just like the <filename>control</filename> file studied in <xref linkend=\"sect.control\" />) which describes the source package and indicates which other files are part thereof. It is signed by its maintainer, which guarantees authenticity. See <xref linkend=\"sect.package-authentication\" /> for further details on this subject."
msgstr ""

msgid "A <filename>.dsc</filename> file"
msgstr ""

msgid ""
"\n"
"-----BEGIN PGP SIGNED MESSAGE-----\n"
"Hash: SHA256\n"
"\n"
"Format: 3.0 (quilt)\n"
"Source: zim\n"
"Binary: zim\n"
"Architecture: all\n"
"Version: 0.62-3\n"
"Maintainer: Emfox Zhou &lt;emfox@debian.org&gt;\n"
"Uploaders: Raphaël Hertzog &lt;hertzog@debian.org&gt;\n"
"Homepage: http://zim-wiki.org\n"
"Standards-Version: 3.9.6\n"
"Vcs-Browser: http://anonscm.debian.org/gitweb/?p=collab-maint/zim.git\n"
"Vcs-Git: git://anonscm.debian.org/collab-maint/zim.git\n"
"Build-Depends: debhelper (&gt;= 9), xdg-utils, python (&gt;= 2.6.6-3~), libgtk2.0-0 (&gt;= 2.6), python-gtk2, python-xdg\n"
"Package-List:\n"
" zim deb x11 optional arch=all\n"
"Checksums-Sha1:\n"
" ad8de170826682323c10195b65b9f1243fd75637 1772246 zim_0.62.orig.tar.gz\n"
" a4f70d6f7fb404022c9cc4870a4e62ea3ca08388 14768 zim_0.62-3.debian.tar.xz\n"
"Checksums-Sha256:\n"
" 19d62aebd2c1a92d84d80720c6c1dcdb779c39a2120468fed01b7f252511bdc2 1772246 zim_0.62.orig.tar.gz\n"
" fc2e827e83897d5e33f152f124802c46c3c01c5158b75a8275a27833f1f6f1de 14768 zim_0.62-3.debian.tar.xz\n"
"Files:\n"
" 43419efba07f7086168442e3d698287a 1772246 zim_0.62.orig.tar.gz\n"
" 725a69663a6c2961f07673ae541298e4 14768 zim_0.62-3.debian.tar.xz\n"
"\n"
"-----BEGIN PGP SIGNATURE-----\n"
"Version: GnuPG v2\n"
"Comment: Signed by Raphael Hertzog\n"
"\n"
"iQEcBAEBCAAGBQJUR2jqAAoJEAOIHavrwpq5WFcH/RsdzCHc1oXXxHitU23hEqMj\n"
"T6ok29M1UFDJDowMXW75jQ1nT4WPUtvEGygkCHeoO/PvjEvB0sjU8GQlX+N9ddSB\n"
"aHfqfAYmVhADNGxrXQT5inZXUa8qGeeq2Sqf6YcWtsnuD56lDbvxkyf/XYopoIEl\n"
"oltfl05z/AI+vYsW482YrCz0fxNAKAvkyuPhDebYI8jnKWeAANoqmKpsNc/HYyvT\n"
"+ZiA5o57OiGdOKT6XGy3/FiF3dkHiRY8lXW7xdr1BbIgulwl9UmiUNwuxwOYbQO7\n"
"edtjiTJqOaFUA0x1zB/XGv5tHr1MjP8naT+kfVoVHTOox51CDbeu5D3DZY4imcY=\n"
"=Wtoa\n"
"-----END PGP SIGNATURE-----"
msgstr ""

msgid "<primary><literal>Build-Depends</literal>, header field</primary>"
msgstr ""

msgid "Note that the source package also has dependencies (<literal>Build-Depends</literal>) completely distinct from those of binary packages, since they indicate tools required to compile the software in question and construct its binary package."
msgstr ""

msgid "<emphasis>CAUTION</emphasis> Distinct namespaces"
msgstr ""

msgid "It is important to note here that there is no required correspondence between the name of the source package and that of the binary package(s) that it generates. It is easy enough to understand if you know that each source package may generate several binary packages. This is why the <filename>.dsc</filename> file has the <literal>Source</literal> and <literal>Binary</literal> fields to explicitly name the source package and store the list of binary packages that it generates."
msgstr ""

msgid "<emphasis>CULTURE</emphasis> Why divide into several packages"
msgstr ""

msgid "Quite frequently, a source package (for a given software) can generate several binary packages. The split is justified by the possibility to use (parts of) the software in different contexts. Consider a shared library, it may be installed to make an application work (for example, <emphasis role=\"pkg\">libc6</emphasis>), or it can be installed to develop a new program (<emphasis role=\"pkg\">libc6-dev</emphasis> will then be the correct package). We find the same logic for client/server services where we want to install the server part on one machine and the client part on others (this is the case, for example, of <emphasis role=\"pkg\">openssh-server</emphasis> and <emphasis role=\"pkg\">openssh-client</emphasis>)."
msgstr ""

msgid "Just as frequently, the documentation is provided in a dedicated package: the user may install it independently from the software, and may at any time choose to remove it to save disk space. Additionally, this also saves disk space on the Debian mirrors, since the documentation package will be shared amongst all of the architectures (instead of having the documentation duplicated in the packages for each architecture)."
msgstr ""

msgid "<emphasis>PERSPECTIVE</emphasis> Different source package formats"
msgstr ""

msgid "Originally there was only one source package format. This is the <literal>1.0</literal> format, which associates an <filename>.orig.tar.gz</filename> archive to a <filename>.diff.gz</filename> “debianization” patch (there is also a variant, consisting of a single <filename>.tar.gz</filename> archive, which is automatically used if no <filename>.orig.tar.gz</filename> is available)."
msgstr ""

msgid "Since Debian <emphasis role=\"distribution\">Squeeze</emphasis>, Debian developers have the option to use new formats that correct many problems of the historical format. Format <literal>3.0 (quilt)</literal> can combine multiple upstream archives in the same source package: in addition to the usual <filename>.orig.tar.gz</filename>, supplementary <filename>.orig-<replaceable>component</replaceable>.tar.gz</filename> archives can be included. This is useful with software that is distributed in several upstream components but for which a single source package is desired. These archives can also be compressed with <command>bzip2</command> or <command>xz</command> rather than <command>gzip</command>, which saves disk space and network resources. Finally, the monolithic patch, <filename>.diff.gz</filename> is replaced by a <filename>.debian.tar.gz</filename> archive containing the compiling instructions and a set of upstream patches contributed by the package maintainer. These last are recorded in a format compatible with <command>quilt</command> — a tool that facilitates the management of a series of patches."
msgstr ""

msgid "The <filename>.orig.tar.gz</filename> file is an archive containing the source code as provided by the original developer. Debian package maintainers are asked to not modify this archive in order to be able to easily check the origin and integrity of the file (by simple comparison with a checksum) and to respect the wishes of some authors."
msgstr ""

msgid "The <filename>.debian.tar.gz</filename> contains all of the modifications made by the Debian maintainer, especially the addition of a <filename>debian</filename> directory containing the instructions to execute to construct a Debian package."
msgstr ""

msgid "<emphasis>TOOL</emphasis> Decompressing a source package"
msgstr ""

msgid "<primary><command>dpkg-source</command></primary>"
msgstr ""

msgid "<primary>decompressing, source package</primary>"
msgstr ""

msgid "<primary>uncompressing, source package</primary>"
msgstr ""

msgid "<primary>unpacking</primary><secondary>source package</secondary>"
msgstr ""

msgid "If you have a source package, you can use the <command>dpkg-source</command> command (from the <emphasis role=\"pkg\">dpkg-dev</emphasis> package) to decompress it:"
msgstr ""

msgid "<computeroutput>$ </computeroutput><userinput>dpkg-source -x package_0.7-1.dsc</userinput>"
msgstr ""

msgid "You can also use <command>apt-get</command> to download a source package and unpack it right away. It requires that the appropriate <literal>deb-src</literal> lines be present in the <filename>/etc/apt/sources.list</filename> file, however (for further details, see <xref linkend=\"sect.apt-sources.list\" />). These are used to list the “sources” of source packages (meaning the servers on which a group of source packages are hosted)."
msgstr ""

msgid "<computeroutput>$ </computeroutput><userinput>apt-get source <replaceable>package</replaceable></userinput>"
msgstr ""

msgid "Usage within Debian"
msgstr ""

msgid "The source package is the foundation of everything in Debian. All Debian packages come from a source package, and each modification in a Debian package is the consequence of a modification made to the source package. The Debian maintainers work with the source package, knowing, however, the consequences of their actions on the binary packages. The fruits of their labors are thus found in the source packages available from Debian: you can easily go back to them and everything stems from them."
msgstr ""

msgid "When a new version of a package (source package and one or more binary packages) arrives on the Debian server, the source package is the most important. Indeed, it will then be used by a network of machines of different architectures for compilation on the various architectures supported by Debian. The fact that the developer also sends one or more binary packages for a given architecture (usually i386 or amd64) is relatively unimportant, since these could just as well have been automatically generated."
msgstr ""

msgid "Manipulating Packages with <command>dpkg</command>"
msgstr ""

msgid "<command>dpkg</command> is the base command for handling Debian packages on the system. If you have <filename>.deb</filename> packages, it is <command>dpkg</command> that allows installation or analysis of their contents. But this program only has a partial view of the Debian universe: it knows what is installed on the system, and whatever it is given on the command line, but knows nothing of the other available packages. As such, it will fail if a dependency is not met. Tools such as <command>apt</command>, on the contrary, will create a list of dependencies to install everything as automatically as possible."
msgstr ""

msgid "<emphasis>NOTE</emphasis> <command>dpkg</command> or <command>apt</command>?"
msgstr ""

msgid "<command>dpkg</command> should be seen as a system tool (backend), and <command>apt</command> as a tool closer to the user, which overcomes the limitations of the former. These tools work together, each one with its particularities, suited to specific tasks."
msgstr ""

msgid "Installing Packages"
msgstr ""

msgid "<primary>installation</primary><secondary>package installation</secondary>"
msgstr ""

msgid "<primary>package</primary><secondary>installation</secondary>"
msgstr ""

msgid "<command>dpkg</command> is, above all, the tool for installing an already available Debian package (because it does not download anything). To do this, we use its <literal>-i</literal> or <literal>--install</literal> option."
msgstr ""

msgid "Installation of a package with <command>dpkg</command>"
msgstr ""

msgid ""
"\n"
"<computeroutput># </computeroutput><userinput>dpkg -i man-db_2.7.0.2-5_amd64.deb</userinput>\n"
"<computeroutput>(Reading database ... 86425 files and directories currently installed.)\n"
"Preparing to unpack man-db_2.7.0.2-5_amd64.deb ...\n"
"Unpacking man-db (2.7.0.2-5) over (2.7.0.2-4) ...\n"
"Setting up man-db (2.7.0.2-5) ...\n"
"Updating database of manual pages ...\n"
"Processing triggers for mime-support (3.58) ...</computeroutput>"
msgstr ""

msgid "We can see the different steps performed by <command>dpkg</command>; we know, thus, at what point any error may have occurred. The installation can also be effected in two stages: first unpacking, then configuration. <command>apt-get</command> takes advantage of this, limiting the number of calls to <command>dpkg</command> (since each call is costly, due to loading of the database in memory, especially the list of already installed files)."
msgstr ""

msgid "Separate unpacking and configuration"
msgstr ""

msgid ""
"\n"
"<computeroutput># </computeroutput><userinput>dpkg --unpack man-db_2.7.0.2-5_amd64.deb</userinput>\n"
"<computeroutput>(Reading database ... 86425 files and directories currently installed.)\n"
"Preparing to unpack man-db_2.7.0.2-5_amd64.deb ...\n"
"Unpacking man-db (2.7.0.2-5) over (2.7.0.2-5) ...\n"
"Processing triggers for mime-support (3.58) ...\n"
"# </computeroutput><userinput>dpkg --configure man-db</userinput>\n"
"<computeroutput>Setting up man-db (2.7.0.2-5) ...\n"
"Updating database of manual pages ...\n"
"</computeroutput>"
msgstr ""

msgid "<primary>package</primary><secondary>unpacking</secondary>"
msgstr ""

msgid "<primary>unpacking</primary><secondary>binary package</secondary>"
msgstr ""

msgid "Sometimes <command>dpkg</command> will fail to install a package and return an error; if the user orders it to ignore this, it will only issue a warning; it is for this reason that we have the different <literal>--force-*</literal> options. The <command>dpkg --force-help</command> command, or documentation of this command, will give a complete list of these options. The most frequent error, which you are bound to encounter sooner or later, is a file collision. When a package contains a file that is already installed by another package, <command>dpkg</command> will refuse to install it. The following messages will then appear:"
msgstr ""

msgid ""
"\n"
"<computeroutput>Unpacking libgdm (from .../libgdm_3.8.3-2_amd64.deb) ...\n"
"dpkg: error processing /var/cache/apt/archives/libgdm_3.8.3-2_amd64.deb (--unpack):\n"
" trying to overwrite '/usr/bin/gdmflexiserver', which is also in package gdm3 3.4.1-9</computeroutput>"
msgstr ""

msgid "In this case, if you think that replacing this file is not a significant risk to the stability of your system (which is usually the case), you can use the option <literal>--force-overwrite</literal>, which tells <command>dpkg</command> to ignore this error and overwrite the file."
msgstr ""

msgid "While there are many available <literal>--force-*</literal> options, only <literal>--force-overwrite</literal> is likely to be used regularly. These options only exist for exceptional situations, and it is better to leave them alone as much as possible in order to respect the rules imposed by the packaging mechanism. Do not forget, these rules ensure the consistency and stability of your system."
msgstr ""

msgid "<emphasis>CAUTION</emphasis> Effective use of <literal>--force-*</literal>"
msgstr ""

msgid "<primary>broken dependency</primary>"
msgstr ""

msgid "If you are not careful, the use of an option <literal>--force-*</literal> can lead to a system where the APT family of commands will refuse to function. In effect, some of these options allow installation of a package when a dependency is not met, or when there is a conflict. The result is an inconsistent system from the point of view of dependencies, and the APT commands will refuse to execute any action except those that will bring the system back to a consistent state (this often consists of installing the missing dependency or removing a problematic package). This often results in a message like this one, obtained after installing a new version of <emphasis role=\"pkg\">rdesktop</emphasis> while ignoring its dependency on a newer version of the <emphasis role=\"pkg\">libc6</emphasis>:"
msgstr ""

msgid ""
"<computeroutput># </computeroutput><userinput>apt full-upgrade\n"
"</userinput><computeroutput>[...]\n"
"You might want to run 'apt-get -f install' to correct these.\n"
"The following packages have unmet dependencies:\n"
"  rdesktop: Depends: libc6 (&gt;= 2.5) but 2.3.6.ds1-13etch7 is installed\n"
"E: Unmet dependencies. Try using -f.</computeroutput>"
msgstr ""

msgid "A courageous administrator who is certain of the correctness of their analysis may choose to ignore a dependency or conflict and use the corresponding <literal>--force-*</literal> option. In this case, if they want to be able to continue to use <command>apt</command> or <command>aptitude</command>, they must edit <filename>/var/lib/dpkg/status</filename> to delete/modify the dependency, or conflict, that they chose to override."
msgstr ""

msgid "This manipulation is an ugly hack, and should never be used, except in the most extreme case of necessity. Quite frequently, a more fitting solution is to recompile the package that's causing the problem (see <xref linkend=\"sect.rebuilding-package\" />) or use a new version (potentially corrected) from a repository such as the <literal>stable-backports</literal> one (see <xref linkend=\"sect.backports\" />)."
msgstr ""

msgid "<primary>removing a package</primary>"
msgstr ""

msgid "<primary>purging a package</primary>"
msgstr ""

msgid "<primary>package</primary><secondary>removal</secondary>"
msgstr ""

msgid "<primary>package</primary><secondary>purge</secondary>"
msgstr ""

msgid "Invoking <command>dpkg</command> with the <literal>-r</literal> or <literal>--remove</literal> option, followed by the name of a package, removes that package. This removal is, however, not complete: all of the configuration files, maintainer scripts, log files (system logs) and other user data handled by the package remain. That way disabling the program is easily done by uninstalling it, and it's still possible to quickly reinstall it with the same configuration. To completely remove everything associated with a package, use the <literal>-P</literal> or <literal>--purge</literal> option, followed by the package name."
msgstr ""

msgid "Removal and purge of the <emphasis role=\"pkg\">debian-cd</emphasis> package"
msgstr ""

msgid ""
"<computeroutput># </computeroutput><userinput>dpkg -r debian-cd</userinput>\n"
"<computeroutput>(Reading database ... 97747 files and directories currently installed.)\n"
"Removing debian-cd (3.1.17) ...\n"
"# </computeroutput><userinput>dpkg -P debian-cd</userinput>\n"
"<computeroutput>(Reading database ... 97401 files and directories currently installed.)\n"
"Removing debian-cd (3.1.17) ...\n"
"Purging configuration files for debian-cd (3.1.17) ...</computeroutput>"
msgstr ""

msgid "Querying <command>dpkg</command>'s Database and Inspecting <filename>.deb</filename> Files"
msgstr ""

msgid "<primary>package</primary><secondary>status</secondary>"
msgstr ""

msgid "<primary>package</primary><secondary>file list</secondary>"
msgstr ""

msgid "<primary>package</primary><secondary>content inspection</secondary>"
msgstr ""

msgid "<emphasis>BACK TO BASICS</emphasis> Option syntax"
msgstr ""

msgid "Most options are available in a “long” version (one or more relevant words, preceded by a double dash) and a “short” version (a single letter, often the initial of one word from the long version, and preceded by a single dash). This convention is so common that it is a POSIX standard."
msgstr ""

msgid "Before concluding this section, we will study <command>dpkg</command> options that query the internal database in order to obtain information. Giving first the long options and then corresponding short options (that will evidently take the same possible arguments) we cite <literal>--listfiles <replaceable>package</replaceable></literal> (or <literal>-L</literal>), which lists the files installed by this package; <literal>--search <replaceable>file</replaceable></literal> (or <literal>-S</literal>), which finds the package(s) containing the file; <literal>--status <replaceable>package</replaceable></literal> (or <literal>-s</literal>), which displays the headers of an installed package; <literal>--list</literal> (or <literal>-l</literal>), which displays the list of packages known to the system and their installation status; <literal>--contents <replaceable>file.deb</replaceable></literal> (or <literal>-c</literal>), which lists the files in the Debian package specified; <literal>--info<replaceable> file.deb </replaceable></literal> (or <literal>-I</literal>), which displays the headers of this Debian package."
msgstr ""

msgid "Various queries with <command>dpkg</command>"
msgstr ""

msgid ""
"\n"
"<computeroutput>$ </computeroutput><userinput>dpkg -L base-passwd</userinput>\n"
"<computeroutput>/.\n"
"/usr\n"
"/usr/sbin\n"
"/usr/sbin/update-passwd\n"
"/usr/share\n"
"/usr/share/lintian\n"
"/usr/share/lintian/overrides\n"
"/usr/share/lintian/overrides/base-passwd\n"
"/usr/share/doc-base\n"
"/usr/share/doc-base/users-and-groups\n"
"/usr/share/base-passwd\n"
"/usr/share/base-passwd/group.master\n"
"/usr/share/base-passwd/passwd.master\n"
"/usr/share/man\n"
"/usr/share/man/pl\n"
"/usr/share/man/pl/man8\n"
"/usr/share/man/pl/man8/update-passwd.8.gz\n"
"/usr/share/man/ru\n"
"/usr/share/man/ru/man8\n"
"/usr/share/man/ru/man8/update-passwd.8.gz\n"
"/usr/share/man/ja\n"
"/usr/share/man/ja/man8\n"
"/usr/share/man/ja/man8/update-passwd.8.gz\n"
"/usr/share/man/fr\n"
"/usr/share/man/fr/man8\n"
"/usr/share/man/fr/man8/update-passwd.8.gz\n"
"/usr/share/man/es\n"
"/usr/share/man/es/man8\n"
"/usr/share/man/es/man8/update-passwd.8.gz\n"
"/usr/share/man/de\n"
"/usr/share/man/de/man8\n"
"/usr/share/man/de/man8/update-passwd.8.gz\n"
"/usr/share/man/man8\n"
"/usr/share/man/man8/update-passwd.8.gz\n"
"/usr/share/doc\n"
"/usr/share/doc/base-passwd\n"
"/usr/share/doc/base-passwd/users-and-groups.txt.gz\n"
"/usr/share/doc/base-passwd/changelog.gz\n"
"/usr/share/doc/base-passwd/copyright\n"
"/usr/share/doc/base-passwd/README\n"
"/usr/share/doc/base-passwd/users-and-groups.html\n"
"$ </computeroutput><userinput>dpkg -S /bin/date</userinput>\n"
"<computeroutput>coreutils: /bin/date\n"
"$ </computeroutput><userinput>dpkg -s coreutils</userinput>\n"
"<computeroutput>Package: coreutils\n"
"Essential: yes\n"
"Status: install ok installed\n"
"Priority: required\n"
"Section: utils\n"
"Installed-Size: 13855\n"
"Maintainer: Michael Stone &lt;mstone@debian.org&gt;\n"
"Architecture: amd64\n"
"Multi-Arch: foreign\n"
"Version: 8.23-3\n"
"Replaces: mktemp, realpath, timeout\n"
"Pre-Depends: libacl1 (&gt;= 2.2.51-8), libattr1 (&gt;= 1:2.4.46-8), libc6 (&gt;= 2.17), libselinux1 (&gt;= 2.1.13)\n"
"Conflicts: timeout\n"
"Description: GNU core utilities\n"
" This package contains the basic file, shell and text manipulation\n"
" utilities which are expected to exist on every operating system.\n"
" .\n"
" Specifically, this package includes:\n"
" arch base64 basename cat chcon chgrp chmod chown chroot cksum comm cp\n"
" csplit cut date dd df dir dircolors dirname du echo env expand expr\n"
" factor false flock fmt fold groups head hostid id install join link ln\n"
" logname ls md5sum mkdir mkfifo mknod mktemp mv nice nl nohup nproc numfmt\n"
" od paste pathchk pinky pr printenv printf ptx pwd readlink realpath rm\n"
" rmdir runcon sha*sum seq shred sleep sort split stat stty sum sync tac\n"
" tail tee test timeout touch tr true truncate tsort tty uname unexpand\n"
" uniq unlink users vdir wc who whoami yes\n"
"Homepage: http://gnu.org/software/coreutils\n"
"$ </computeroutput><userinput>dpkg -l 'b*'</userinput>\n"
"<computeroutput>Desired=Unknown/Install/Remove/Purge/Hold\n"
"| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend\n"
"|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)\n"
"||/ Name                    Version          Architecture     Description\n"
"+++-=======================-================-================-====================================================\n"
"un  backupninja             &lt;none&gt;           &lt;none&gt;           (no description available)\n"
"ii  backuppc                3.3.0-2          amd64            high-performance, enterprise-grade system for backin\n"
"un  base                    &lt;none&gt;           &lt;none&gt;           (no description available)\n"
"un  base-config             &lt;none&gt;           &lt;none&gt;           (no description available)\n"
"ii  base-files              8                amd64            Debian base system miscellaneous files\n"
"ii  base-passwd             3.5.37           amd64            Debian base system master password and group files\n"
"[...]\n"
"$ </computeroutput><userinput>dpkg -c /var/cache/apt/archives/gnupg_1.4.18-6_amd64.deb</userinput>\n"
"<computeroutput>drwxr-xr-x root/root         0 2014-12-04 23:03 ./\n"
"drwxr-xr-x root/root         0 2014-12-04 23:03 ./lib/\n"
"drwxr-xr-x root/root         0 2014-12-04 23:03 ./lib/udev/\n"
"drwxr-xr-x root/root         0 2014-12-04 23:03 ./lib/udev/rules.d/\n"
"-rw-r--r-- root/root      2711 2014-12-04 23:03 ./lib/udev/rules.d/60-gnupg.rules\n"
"drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/\n"
"drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/lib/\n"
"drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/lib/gnupg/\n"
"-rwxr-xr-x root/root     39328 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_ldap\n"
"-rwxr-xr-x root/root     92872 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_hkp\n"
"-rwxr-xr-x root/root     47576 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_finger\n"
"-rwxr-xr-x root/root     84648 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_curl\n"
"-rwxr-xr-x root/root      3499 2014-12-04 23:03 ./usr/lib/gnupg/gpgkeys_mailto\n"
"drwxr-xr-x root/root         0 2014-12-04 23:03 ./usr/bin/\n"
"-rwxr-xr-x root/root     60128 2014-12-04 23:03 ./usr/bin/gpgsplit\n"
"-rwxr-xr-x root/root   1012688 2014-12-04 23:03 ./usr/bin/gpg\n"
"[...]\n"
"$ </computeroutput><userinput>dpkg -I /var/cache/apt/archives/gnupg_1.4.18-6_amd64.deb</userinput>\n"
"<computeroutput> new debian package, version 2.0.\n"
" size 1148362 bytes: control archive=3422 bytes.\n"
"    1264 bytes,    26 lines      control              \n"
"    4521 bytes,    65 lines      md5sums              \n"
"     479 bytes,    13 lines   *  postinst             #!/bin/sh\n"
"     473 bytes,    13 lines   *  preinst              #!/bin/sh\n"
" Package: gnupg\n"
" Version: 1.4.18-6\n"
" Architecture: amd64\n"
" Maintainer: Debian GnuPG-Maintainers &lt;pkg-gnupg-maint@lists.alioth.debian.org&gt;\n"
" Installed-Size: 4888\n"
" Depends: gpgv, libbz2-1.0, libc6 (&gt;= 2.15), libreadline6 (&gt;= 6.0), libusb-0.1-4 (&gt;= 2:0.1.12), zlib1g (&gt;= 1:1.1.4)\n"
" Recommends: gnupg-curl, libldap-2.4-2 (&gt;= 2.4.7)\n"
" Suggests: gnupg-doc, libpcsclite1, parcimonie, xloadimage | imagemagick | eog\n"
" Section: utils\n"
" Priority: important\n"
" Multi-Arch: foreign\n"
" Homepage: http://www.gnupg.org\n"
" Description: GNU privacy guard - a free PGP replacement\n"
"  GnuPG is GNU's tool for secure communication and data storage.\n"
"  It can be used to encrypt data and to create digital signatures.\n"
"  It includes an advanced key management facility and is compliant\n"
"  with the proposed OpenPGP Internet standard as described in RFC 4880.\n"
"[...]</computeroutput>"
msgstr ""

msgid "<emphasis>GOING FURTHER</emphasis> Comparison of versions"
msgstr ""

msgid "<primary>version, comparison</primary>"
msgstr ""

msgid "<primary>comparison of versions</primary>"
msgstr ""

msgid "Since <command>dpkg</command> is the program for handling Debian packages, it also provides the reference implementation of the logic of comparing version numbers. This is why it has a <literal>--compare-versions</literal> option, usable by external programs (especially configuration scripts executed by <command>dpkg</command> itself). This option requires three parameters: a version number, a comparison operator, and a second version number. The different possible operators are <literal>lt</literal> (strictly less than), <literal>le</literal> (less than or equal to), <literal>eq</literal> (equal), <literal>ne</literal> (not equal), <literal>ge</literal> (greater than or equal to), and <literal>gt</literal> (strictly greater than). If the comparison is correct, <command>dpkg</command> returns 0 (success); if not, it gives a non-zero return value (indicating failure)."
msgstr ""

msgid ""
"\n"
"<computeroutput>$ </computeroutput><userinput>dpkg --compare-versions 1.2-3 gt 1.1-4</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>echo $?</userinput>\n"
"<computeroutput>0\n"
"$ </computeroutput><userinput>dpkg --compare-versions 1.2-3 lt 1.1-4</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>echo $?</userinput>\n"
"<computeroutput>1\n"
"$ </computeroutput><userinput>dpkg --compare-versions 2.6.0pre3-1 lt 2.6.0-1</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>echo $?</userinput>\n"
"<computeroutput>1</computeroutput>"
msgstr ""

msgid "Note the unexpected failure of the last comparison: for <command>dpkg</command>, <literal>pre</literal>, usually denoting a pre-release, has no particular meaning, and this program compares the alphabetic characters in the same way as the numbers (a &lt; b &lt; c ...), in alphabetical order. This is why it considers “<literal>0pre3</literal>” to be greater than “<literal>0</literal>”. When we want a package's version number to indicate that it is a pre-release, we use the tilde character, “<literal>~</literal>”:"
msgstr ""

msgid ""
"\n"
"<computeroutput>$ </computeroutput><userinput>dpkg --compare-versions 2.6.0~pre3-1 lt 2.6.0-1</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>echo $?</userinput>\n"
"<computeroutput>0</computeroutput>"
msgstr ""

msgid "<command>dpkg</command>'s Log File"
msgstr ""

msgid "<command>dpkg</command> keeps a log of all of its actions in <filename>/var/log/dpkg.log</filename>. This log is extremely verbose, since it details every one of the stages through which packages handled by <command>dpkg</command> go. In addition to offering a way to track dpkg's behavior, it helps, above all, to keep a history of the development of the system: one can find the exact moment when each package has been installed or updated, and this information can be extremely useful in understanding a recent change in behavior. Additionally, all versions being recorded, it is easy to cross-check the information with the <filename>changelog.Debian.gz</filename> for packages in question, or even with online bug reports."
msgstr ""

msgid "Multi-Arch Support"
msgstr ""

msgid "<primary>Multi-Arch</primary>"
msgstr ""

msgid "<primary>architecture</primary><secondary>multi-arch support</secondary>"
msgstr ""

msgid "All Debian packages have an <literal>Architecture</literal> field in their control information. This field can contain either “<literal>all</literal>” (for packages that are architecture independent) or the name of the architecture that it targets (like “amd64”, “armhf”, …). In the latter case, by default, <command>dpkg</command> will only accept to install the package if its architecture matches the host's architecture as returned by <command>dpkg --print-architecture</command>."
msgstr ""

msgid "This restriction ensures that users do not end up with binaries compiled for an incorrect architecture. Everything would be perfect except that (some) computers can run binaries for multiple architectures, either natively (an “amd64“ system can run “i386” binaries) or through emulators."
msgstr ""

msgid "Enabling Multi-Arch"
msgstr ""

msgid "<command>dpkg</command>'s multi-arch support allows users to define “foreign architectures” that can be installed on the current system. This is simply done with <command>dpkg --add-architecture</command> like in the example below. There is a corresponding <command>dpkg --remove-architecture</command> to drop support of a foreign architecture, but it can only be used when no packages of this architecture remain."
msgstr ""

msgid ""
"\n"
"<computeroutput># </computeroutput><userinput>dpkg --print-architecture</userinput>\n"
"<computeroutput>amd64\n"
"# </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>\n"
"<computeroutput># </computeroutput><userinput>dpkg -i gcc-4.9-base_4.9.1-19_armhf.deb</userinput>\n"
"<computeroutput>dpkg: error processing archive gcc-4.9-base_4.9.1-19_armhf.deb (--install):\n"
" package architecture (armhf) does not match system (amd64)\n"
"Errors were encountered while processing:\n"
" gcc-4.9-base_4.9.1-19_armhf.deb\n"
"# </computeroutput><userinput>dpkg --add-architecture armhf</userinput>\n"
"<computeroutput># </computeroutput><userinput>dpkg --add-architecture armel</userinput>\n"
"<computeroutput># </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>\n"
"<computeroutput>armhf\n"
"armel\n"
"# </computeroutput><userinput>dpkg -i gcc-4.9-base_4.9.1-19_armhf.deb</userinput>\n"
"<computeroutput>Selecting previously unselected package gcc-4.9-base:armhf.\n"
"(Reading database ... 86425 files and directories currently installed.)\n"
"Preparing to unpack gcc-4.9-base_4.9.1-19_armhf.deb ...\n"
"Unpacking gcc-4.9-base:armhf (4.9.1-19) ...\n"
"Setting up gcc-4.9-base:armhf (4.9.1-19) ...\n"
"# </computeroutput><userinput>dpkg --remove-architecture armhf</userinput>\n"
"<computeroutput>dpkg: error: cannot remove architecture 'armhf' currently in use by the database\n"
"# </computeroutput><userinput>dpkg --remove-architecture armel</userinput>\n"
"<computeroutput># </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>\n"
"<computeroutput>armhf</computeroutput>"
msgstr ""

msgid "<emphasis>NOTE</emphasis> APT's multi-arch support"
msgstr ""

msgid "APT will automatically detect when dpkg has been configured to support foreign architectures and will start downloading the corresponding <filename>Packages</filename> files durings its update process."
msgstr ""

msgid "Foreign packages can then be installed with <command>apt install <replaceable>package</replaceable>:<replaceable>architecture</replaceable></command>."
msgstr ""

msgid "<emphasis>IN PRACTICE</emphasis> Using proprietary i386 binaries on amd64"
msgstr ""

msgid "There are multiple use cases for multi-arch, but the most popular one is the possibility to execute 32 bit binaries (i386) on 64 bit systems (amd64), in particular since several popular proprietary applications (like Skype) are only provided in 32 bit versions."
msgstr ""

msgid "Multi-Arch Related Changes"
msgstr ""

msgid "To make multi-arch actually useful and usable, libraries had to be repackaged and moved to an architecture-specific directory so that multiple copies (targeting different architectures) can be installed alongside. Such updated packages contain the “<literal>Multi-Arch: same</literal>” header field to tell the packaging system that the various architectures of the package can be safely co-installed (and that those packages can only satisfy dependencies of packages of the same architecture). Since multi-arch made its debut in Debian <emphasis role=\"distribution\">Wheezy</emphasis>, not all libraries have been converted yet."
msgstr ""

msgid ""
"<computeroutput>$ </computeroutput><userinput>dpkg -s gcc-4.9-base\n"
"</userinput><computeroutput>dpkg-query: error: --status needs a valid package name but 'gcc-4.9-base' is not: ambiguous package name 'gcc-4.9-base' with more than one installed instance\n"
"\n"
"Use --help for help about querying packages.\n"
"$ </computeroutput><userinput>dpkg -s gcc-4.9-base:amd64 gcc-4.9-base:armhf | grep ^Multi\n"
"</userinput><computeroutput>Multi-Arch: same\n"
"Multi-Arch: same\n"
"$ </computeroutput><userinput>dpkg -L libgcc1:amd64 |grep .so\n"
"</userinput><computeroutput>/lib/x86_64-linux-gnu/libgcc_s.so.1\n"
"$ </computeroutput><userinput>dpkg -S /usr/share/doc/gcc-4.9-base/copyright\n"
"</userinput><computeroutput>gcc-4.9-base:amd64, gcc-4.9-base:armhf: /usr/share/doc/gcc-4.9-base/copyright\n"
"</computeroutput>"
msgstr ""

msgid "It is worth noting that <literal>Multi-Arch: same</literal> packages must have their names qualified with their architecture to be unambiguously identifiable. They also have the possibility to share files with other instances of the same package; <command>dpkg</command> ensures that all packages have bit-for-bit identical files when they are shared. Last but not least, all instances of a package must have the same version. They must thus be upgraded together."
msgstr ""

msgid "Multi-Arch support also brings some interesting challenges in the way dependencies are handled. Satisfying a dependency requires either a package marked “<literal>Multi-Arch: foreign</literal>” or a package whose architecture matches the one of the package declaring the dependency (in this dependency resolution process, architecture-independent packages are assumed to be of the same architecture than the host). A dependency can also be weakened to allow any architecture to fulfill it, with the <literal><replaceable>package</replaceable>:any</literal> syntax, but foreign packages can only satisfy such a dependency if they are marked “<literal>Multi-Arch: allowed</literal>”."
msgstr ""

msgid "Coexistence with Other Packaging Systems"
msgstr ""

msgid "<primary>RPM</primary>"
msgstr ""

msgid "<primary>Red Hat Package Manager</primary>"
msgstr ""

msgid "<primary><command>alien</command></primary>"
msgstr ""

msgid "Debian packages are not the only software packages used in the free software world. The main competitor is the RPM format of the Red Hat Linux distribution and its many derivatives. Red Hat is a very popular, commercial distribution. It is thus common for software provided by third parties to be offered as RPM packages rather than Debian."
msgstr ""

msgid "In this case, you should know that the program <command>rpm</command>, which handles RPM packages, is available as a Debian package, so it is possible to use this package format on Debian. Care should be taken, however, to limit these manipulations to extract the information from a package or to verify its integrity. It is, in truth, unreasonable to use <command>rpm</command> to install an RPM on a Debian system; RPM uses its own database, separate from those of native software (such as <command>dpkg</command>). This is why it is not possible to ensure a stable coexistence of two packaging systems."
msgstr ""

msgid "On the other hand, the <emphasis role=\"pkg\">alien</emphasis> utility can convert RPM packages into Debian packages, and vice versa."
msgstr ""

msgid "<emphasis>COMMUNITY</emphasis> Encouraging the adoption of <filename>.deb</filename>"
msgstr ""

msgid "If you regularly use the <command>alien</command> program to install RPM packages coming from one of your providers, do not hesitate to write to them and amicably express your strong preference for the <filename>.deb</filename> format. Note that the format of the package is not everything: a <filename>.deb</filename> package built with <command>alien</command> or prepared for a version of Debian different than that which you use, or even for a derivative distribution like Ubuntu, would probably not offer the same level of quality and integration as a package specifically developed for Debian <emphasis role=\"distribution\">Jessie</emphasis>."
msgstr ""

msgid ""
"\n"
"<computeroutput>$ </computeroutput><userinput>fakeroot alien --to-deb phpMyAdmin-2.0.5-2.noarch.rpm</userinput> \n"
"<computeroutput>phpmyadmin_2.0.5-2_all.deb generated\n"
"$ </computeroutput><userinput>ls -s phpmyadmin_2.0.5-2_all.deb</userinput>\n"
"<computeroutput>  64 phpmyadmin_2.0.5-2_all.deb</computeroutput>"
msgstr ""

msgid "You will find that this process is extremely simple. You must know, however, that the package generated does not have any dependency information, since the dependencies in the two packaging formats don't have systematic correspondence. The administrator must thus manually ensure that the converted package will function correctly, and this is why Debian packages thus generated should be avoided as much as possible. Fortunately, Debian has the largest collection of software packages of all distributions, and it is likely that whatever you seek is already in there."
msgstr ""

msgid "Looking at the man page for the <command>alien</command> command, you will also note that this program handles other packaging formats, especially the one used by the Slackware distribution (it is made of a simple <filename>tar.gz</filename> archive)."
msgstr ""

msgid "The stability of the software deployed using the <command>dpkg</command> tool contributes to Debian's fame. The APT suite of tools, described in the following chapter, preserves this advantage, while relieving the administrator from managing the status of packages, a necessary but difficult task."
msgstr ""

